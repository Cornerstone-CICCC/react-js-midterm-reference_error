generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_DATABASE_URL")
  directUrl = env("SUPABASE_DIRECT_URL")
  schemas   = ["public", "development", "test", "production"]
}

// password is managed by Supabase
model User {
  id              String    @id @default(uuid()) @db.Uuid
  authId          String    @unique @db.VarChar(255)
  email           String    @unique
  nickname        String    @db.VarChar(50)
  avatarUrl       String?   @db.VarChar(255)
  bio             String?   @db.Text
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  products        Product[]

  buyerOrders   Order[]   @relation("BuyerOrders")
  sellerOrders  Order[]   @relation("SellerOrders")
  transactionHistory TransactionHistory[]
  
  @@map("users")
  @@schema("development")  
}

model Product {
  id                  String         @id @default(uuid()) @db.Uuid
  sellerId            String         @db.Uuid 
  seller              User           @relation(fields: [sellerId], references: [id])
  title               String         @db.VarChar(50)
  description         String        @db.Text
  category            Category     
  condition           Condition?
  status              ProductStatus  @default(available)
  price               Decimal        @db.Decimal(10, 2)
  likeCount           Int            @default(0)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt 
  images              ProductImage[] 
  orders        Order[]
  @@map("products")
  @@schema("development")
}

model ProductImage {
  id         String   @id @default(uuid()) @db.Uuid
  productId  String   @db.Uuid
  product    Product  @relation(fields: [productId], references: [id])
  url  String   @db.VarChar(255)
  order  Int
  format  String   @db.VarChar(50)
  createdAt  DateTime @default(now())
  @@map("product_images")
  @@schema("development")
}

enum Category {
  electronics
  woman_fashion
  man_fashion
  furniture
  health_beauty
  kitchen
  sports
  books
  
  @@schema("development")
}

enum Condition {
  new
  like_new
  good
  fair
  poor
  @@schema("development")
}

enum ProductStatus {
  draft
  available
  sold
  cancelled
  @@schema("development")
}


model Order {
  id            String    @id @default(uuid())
  productId     String    @db.Uuid 
  buyerId       String    @db.Uuid
  sellerId      String    @db.Uuid
  finalPrice    Decimal
  status        String
  createdAt     DateTime  @default(now())
  paidAt        DateTime?
  completedAt   DateTime?

  payment       Payment?
  transactionHistory TransactionHistory[]
  product       Product   @relation(fields: [productId], references: [id])
  buyer         User      @relation("BuyerOrders", fields: [buyerId], references: [id])
  seller        User      @relation("SellerOrders", fields: [sellerId], references: [id])

  @@map("orders")
  @@schema("development")
}

model Payment {
  id            String    @id @default(uuid())
  orderId       String    @unique
  amount        Decimal
  fee           Decimal
  method        String
  status        String
  createdAt     DateTime  @default(now())
  processedAt   DateTime?

  order         Order     @relation(fields: [orderId], references: [id])
  @@map("payments")
  @@schema("development")
}

model TransactionHistory {
  id        String   @id @default(uuid())
  userId    String   @db.Uuid
  orderId   String   
  type      TransactionType
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  order Order @relation(fields: [orderId], references: [id])

  @@index([userId])
  @@index([orderId])

  @@map("transaction_history")
  @@schema("development")
}

enum TransactionType {
  purchase
  sale
  @@schema("development")
}